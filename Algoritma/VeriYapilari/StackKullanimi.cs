using System;

namespace Programlama.VeriYapilari
{
    class StackKullanimiClass
    {
        public static void StackMainMethod()
        {

            

            BasicStack();

        }


        #region AI Ornek

        public static void BasicStack()
        {
            //TanÄ±mlama | Stack<T>
            Stack<string> kelimeler = new Stack<string>();

            //Ekleme | Push()
            kelimeler.Push("elma");
            kelimeler.Push("armut");
            kelimeler.Push("muz");

            //Ekelene elemanlarÄ± dÃ¶ngÃ¼ ile gÃ¶rme
            foreach (var item in kelimeler)
            {
                System.Console.WriteLine(item);
            }

            //Ã¼sttekini gÃ¶r ama Ã§Ä±karma | Peek()
            System.Console.WriteLine(kelimeler.Peek());

            //Ã‡Ä±karma | Pop()
            System.Console.WriteLine($"Pop: {kelimeler.Pop()}");

            //Eleman sayÄ±sÄ± | Count (properties)
            System.Console.WriteLine($"Kalan eleman sayÄ±sÄ±: {kelimeler.Count}");
        }
            
        #endregion




        public static void OrnekMetod2()
        {
            System.Console.WriteLine("LÃ¼tfen bir sayÄ± giriniz:");
            int sayi = Convert.ToInt32(Console.ReadLine());

            var sayiYigini = new Stack<int>();
            while (sayi > 0)
            {
                int k = sayi % 10; // SayÄ±nÄ±n son basamaÄŸÄ±nÄ± bul (mode 10)
                sayiYigini.Push(k); // Bulunan basamaÄŸÄ± yÄ±ÄŸÄ±na ekle
                sayi = sayi / 10; // SayÄ±yÄ± bir basamak kÃ¼Ã§Ã¼lt
            }

            int i = 0;
            int n = sayiYigini.Count - 1;
            foreach (var item in sayiYigini)
            {
                System.Console.WriteLine($"{item} * {Math.Pow(10, n - i)} = {item * Math.Pow(10, n - i)}");
                i++;
            }

            /*  Math.Pow(x, y) nedir?

             C#â€™ta Ã¼s alma fonksiyonudur.

             - x taban
             - y Ã¼s

             ğŸ‘‰ Yani Math.Pow(2, 3) â†’ 2^3 = 8 
             */
        }


        private static void YiginOrnegi()
        {
            var karakterYigini = new Stack<char>();
            for (int i = 65; i <= 90; i++)
            {
                karakterYigini.Push((char)i);
                System.Console.WriteLine($"{karakterYigini.Peek()} YÄ±ÄŸÄ±na eklendi");
                System.Console.WriteLine($"YÄ±ÄŸÄ±ndaki eleman sayisi : {karakterYigini.Count}");
            }
            //ek Bilgi
            var dizi = karakterYigini.ToArray();// stack i diziye aktardÄ±k
            System.Console.WriteLine("\nYÄ±ÄŸÄ±ndan Ã‡Ä±karma Ä°ÅŸlemi iÃ§in bir tuÅŸa basÄ±n");
            Console.ReadKey();

            while (karakterYigini.Count > 0)
            {
                System.Console.WriteLine($"{karakterYigini.Pop()} YÄ±ÄŸÄ±ndan Ã§Ä±karÄ±ldÄ±.");
                System.Console.WriteLine($"YÄ±ÄŸÄ±ndaki eleman sayisi : {karakterYigini.Count}");
            }
        }



        #region Temel 

        // Static metod -> Non-static metod = Evet, nesne oluÅŸturmak zorunlu
        //Stack ile alakasÄ±z static olamayan bir metot kullanÄ±mÄ±
        // Non-static method â†’ nesneye baÄŸlÄ±, sÄ±nÄ±fÄ±n Ã¶rneÄŸi (instance) Ã¼zerinden Ã§aÄŸrÄ±lÄ±r.
        /* StackKullanimiClass stackClass = new StackKullanimiClass();
        stackClass.StackTemelleriMethod(); */
        public void StackTemelleriMethod()
        {


            //Stack<T> TanÄ±mlama
            var karakterYigini = new Stack<char>();


            // Ekleme - Push() | En Ã¼steki nesneyi gÃ¶ster - Peek()
            EklemeVeGostermeMethod(karakterYigini);

            //Ã‡Ä±karma - Pop()
            CikarmaMethod(karakterYigini);
        }

        public void EklemeVeGostermeMethod(Stack<char> karakterYigini)
        {
            karakterYigini.Push('A');
            System.Console.WriteLine(karakterYigini.Peek());//En Ã¼steki nesneyi gÃ¶ster | Peek()

            karakterYigini.Push('B');
            System.Console.WriteLine(karakterYigini.Peek());//En Ã¼steki nesneyi gÃ¶ster | Peek()

            karakterYigini.Push('C');
            System.Console.WriteLine(karakterYigini.Peek());//En Ã¼steki nesneyi gÃ¶ster | Peek()

        }
        public void CikarmaMethod(Stack<char> karakterYigini)
        {
            //Hem YÄ±ÄŸÄ±ndan Ã§Ä±kar hemde Ã§Ä±kan elemanÄ± gÃ¶ster
            System.Console.WriteLine(karakterYigini.Pop() + " YÄ±ÄŸÄ±ndan Ã§Ä±kartÄ±ldÄ±");
            System.Console.WriteLine(karakterYigini.Pop() + " YÄ±ÄŸÄ±ndan Ã§Ä±kartÄ±ldÄ±");
            System.Console.WriteLine(karakterYigini.Pop() + " YÄ±ÄŸÄ±ndan Ã§Ä±kartÄ±ldÄ±");
        }
        #endregion

    }

    #region Temel Bilgi
    /*
      **  Stack<T> YapÄ±sÄ±  **

    - System.Collection.Generic sÄ±nÄ±fÄ± altÄ±nda yer alÄ±r.
    - Generic -> Boxing ve Unboxing yoktur. Bu nedenle daha hazlÄ±dÄ±r.
    - T -> Type(tip) -> Stack<int> , Stack<string> -> tip gÃ¼venliÄŸi
    - LIFO -> Last-In First-out -> Son gelen, ilk Ã§Ä±kar.

    Properties
    -Count -> eleman sayÄ±sÄ± dÃ¶ner

    Methods
    - push() -> yeni eleman ekler (Ã¼ste koyar).
    - pop() -> en Ã¼stteki elemanÄ± Ã§Ä±karÄ±r ve dÃ¶ndÃ¼rÃ¼r
    - peek() -> en Ã¼steki elemanÄ± dÃ¶ndÃ¼rÃ¼r
    - Contains(T item) Stack iÃ§inde belirtilen eleman varmÄ± kontol
    - Clear() -> tÃ¼m elemanlarÄ± temizler
    - ToArray() -> Stack iÃ§eriÄŸini diziye kopyalar
    - TrimExcess() -> Fazladan ayrÄ±lan belleÄŸi serbest bÄ±rakÄ±r
    - GetEnumerator() -> foreach ile gezmeye imkan verir.

    --**-- KULLANIM ALANLARI --**--
    * AyrÄ±ÅŸtÄ±rma
    * Ters Ã‡evirme
    * HafÄ±za TÃ¶netimi
   ** Fonksiyon Ã‡aÄŸrÄ±larÄ± & Ã–zyinileme (Recursion)

      Programlama dillerinin Ã§aÄŸrÄ± yÄ±ÄŸÄ±nlarÄ± aslÄ±nda Stack mantÄ±ÄŸÄ±yla Ã§alÄ±ÅŸÄ±r.

      Ã–rn: Bir fonksiyon baÅŸka bir fonksiyonu Ã§aÄŸÄ±rdÄ±ÄŸÄ±nda dÃ¶nÃ¼ÅŸ sÄ±rasÄ± Stack yapÄ±sÄ±na gÃ¶re tutulur.

   ** Oyunlarda KullanÄ±m

    Envanter Sistemi: BazÄ± oyunlarda son aldÄ±ÄŸÄ±n item ilk Ã§Ä±kar (Ã¶rn. blok dizme, kutu aÃ§ma).

    Hamle Geri Alma: SatranÃ§, kart oyunlarÄ±, bulmaca.

    Stacking MekaniÄŸi: Hyper-casual oyunlarda karakterin topladÄ±ÄŸÄ± objelerin Ã¼st Ã¼ste dizilmesi (mesela odun, kutu, taÅŸ).

    State Management: Oyun sahneleri veya UI ekranlarÄ±nÄ± Stack Ã¼zerinde yÃ¶netebilirsin.



    Ã–zetle:
Stack<T> genelde geÃ§ici veri saklama, geri dÃ¶nÃ¼ÅŸlÃ¼ iÅŸlemler, Ã¶zyinileme, gezinti (geri/ileri) ve algoritma (DFS, parantez dengeleme) iÃ§in kullanÄ±lÄ±r.
Oyunlarda ise Ã¶zellikle undo, inventory, stacking mekaniÄŸi iÃ§in Ã§ok uygundur. 


*/



    #endregion
}