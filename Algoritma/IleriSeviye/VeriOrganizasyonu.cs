using System;

namespace Programlama.IleriAlgoritma
{
    class VeriOrganizasyonuClass
    {
        public static void VeriOrganizasyonuRunMethod()
        {
            
            //Unsigned -> i≈üaretsiz --> sadece pozizitif deƒüerler 
            System.Console.WriteLine("Unsigned {0} | {1}", UInt16.MinValue, UInt16.MaxValue);
           
           //signed -> i≈üaretli -> pozitif ve negatif deƒüerler
            System.Console.WriteLine("signed {0} | {1}", Int16.MinValue, Int16.MaxValue);

        }




        #region byte and sbye hakkƒ±nda bilgi

        private static void ByteAndSbyte()
        {
            /*  byte num1 = 8;
           sbyte num2 = -8; */


            //btye
            // 0 0 0 0 0 0 0 0 ->  0  -> min
            // 1 1 1 1 1 1 1 1 -> 255 -> max
            System.Console.WriteLine("Byte Min: {0} | Max {1}", byte.MinValue, byte.MaxValue);

            //sByte
            // 1 0 0 0 0 0 0 0 -> - 128 -> min
            // 0 1 1 1 1 1 1 1 ->   127 -> max
            System.Console.WriteLine("Byte Min: {0} | Max {1}", sbyte.MinValue, sbyte.MaxValue);

            System.Console.WriteLine();
        }

        private static void ByteAndSbyteHowToConvert()
        {
            var numbers = new String[]{
                "00000000",         // 0
                "00000001",         // 1 => 2^0 ---->>> 1
                "00000010",         // 2 => dikkate alƒ±nmƒ±yor "0" , 2^1 = 2 ----> 2
                "00000011",         // 3 => 2^0 = 1 , 2^1 = 2 --->>> 1 + 2 = 3
                "00001011",         // 11 => 2^0 = 1, 2^1 = 2, dikkate alƒ±nmƒ±yor "0", 2^3 = 8  ---->>> 1 + 2 + 8 = 11
                "10000000",         // 128 | - 128
                "10000001",         // 129 | - 128 + 1  = -127
                "10000011",         // 131 | - 128 + 3  = -125
                "10001111"          // 143 | - 128 + 15 = -113


            };

            System.Console.WriteLine("btye cevrilmi≈ü");
            foreach (var item in numbers)
            {
                //2 -> 2'lik taban
                byte number = Convert.ToByte(item, 2);
                System.Console.WriteLine(number);
            }


            System.Console.WriteLine("\nsbtye cevrilmi≈ü");
            foreach (var item in numbers)
            {
                //2 -> 2'lik taban
                sbyte number = Convert.ToSByte(item, 2);
                System.Console.WriteLine(number);
            }
        }




        #endregion


   #region  A√áIKLAMA
        /*  
=============================
üìå C# VERƒ∞ Tƒ∞PLERƒ∞ TABLOSU
=============================

üîπ TAM SAYILAR
----------------------------------------------------------------------
Veri Tipi | Boyut   | Bit | ƒ∞≈üaret | Aralƒ±k                                | A√ßƒ±klama
----------------------------------------------------------------------
sbyte    | 1 byte  |  8  | signed | -128 ‚Ä¶ +127                          | K√º√ß√ºk negatif/pozitif tamsayƒ±
byte     | 1 byte  |  8  | unsigned | 0 ‚Ä¶ 255                            | K√º√ß√ºk pozitif tamsayƒ±
short    | 2 byte  | 16  | signed | -32,768 ‚Ä¶ +32,767                    | Orta boy tamsayƒ±
ushort   | 2 byte  | 16  | unsigned | 0 ‚Ä¶ 65,535                         | Orta boy pozitif tamsayƒ±
int      | 4 byte  | 32  | signed | -2,147,483,648 ‚Ä¶ +2,147,483,647      | En √ßok kullanƒ±lan tamsayƒ±
uint     | 4 byte  | 32  | unsigned | 0 ‚Ä¶ 4,294,967,295                  | B√ºy√ºk pozitif tamsayƒ±
long     | 8 byte  | 64  | signed | -9,223,372,036,854,775,808 ‚Ä¶ 
                                    +9,223,372,036,854,775,807         | √áok b√ºy√ºk tamsayƒ±
ulong    | 8 byte  | 64  | unsigned | 0 ‚Ä¶ 18,446,744,073,709,551,615     | √áok b√ºy√ºk pozitif tamsayƒ±

üîπ ONDALIKLI SAYILAR
----------------------------------------------------------------------
Veri Tipi | Boyut   | Bit | Hassasiyet           | Aralƒ±k (yakla≈üƒ±k)         | A√ßƒ±klama
----------------------------------------------------------------------
float    | 4 byte  | 32  | ~7 basamak           | ¬±1.5e‚àí45 ‚Ä¶ ¬±3.4e38       | Tek duyarlƒ±klƒ± kayan nokta
double   | 8 byte  | 64  | ~15-16 basamak       | ¬±5.0e‚àí324 ‚Ä¶ ¬±1.7e308     | √áift duyarlƒ±klƒ± kayan nokta
decimal  | 16 byte | 128 | ~28-29 basamak       | ¬±1.0e‚àí28 ‚Ä¶ ¬±7.9e28       | Finans/mali hesaplar i√ßin

üîπ MANTIKSAL VE KARAKTER
----------------------------------------------------------------------
Veri Tipi | Boyut   | Bit | Aralƒ±k               | A√ßƒ±klama
----------------------------------------------------------------------
bool     | 1 byte* |  8* | true / false         | Mantƒ±ksal deƒüer (*CLR‚Äôde genelde 1 byte)
char     | 2 byte  | 16  | Unicode (U+0000 ‚Ä¶ U+FFFF) | Tek karakter

üîπ NESNE / REFERANS Tƒ∞PLERƒ∞
----------------------------------------------------------------------
string   | Deƒüi≈üken | -   | -                   | Karakter dizisi (Unicode)
object   | Deƒüi≈üken | -   | -                   | T√ºm tiplerin atasƒ±
var      | -        | -   | -                   | Derleyici tarafƒ±ndan √ßƒ±karƒ±lan tip
dynamic  | -        | -   | -                   | √áalƒ±≈üma zamanƒ±nda belirlenen tip

=============================
NOTLAR:
- signed = i≈üaretli (negatif + pozitif)
- unsigned = i≈üaretsiz (sadece pozitif)
- float/double/decimal -> ondalƒ±klƒ± sayƒ±lar
- string -> metin tutar
- object -> t√ºm tiplerin temelidir
=============================
*/
        #endregion

    }
}